// <auto-generated/>
// This file is automatically included in projects that reference DKNet.EfCore.DtoGenerator.

namespace DKNet.EfCore.DtoGenerator;

/// <summary>
/// Attribute applied to an empty <c>partial record</c> (recommended) or class to instruct the DTO generator
/// to emit properties mirroring the public instance readable properties of the provided entity <see cref="System.Type"/>.
/// </summary>
/// <remarks>
/// Example:
/// <code>
/// public class Person { public Guid ID { get; set; } public string Name { get; set; } = string.Empty; }
/// [GenerateDto(typeof(Person))]
/// public partial record PersonDto; // Generated properties + mapping helpers.
///
/// // Exclude specific properties:
/// [GenerateDto(typeof(Person), Exclude = new[] { "ID", "CreatedAt" })]
/// public partial record PersonSummaryDto; // Generated without ID and CreatedAt properties.
/// </code>
/// </remarks>
[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, AllowMultiple = false, Inherited = false)]
public sealed class GenerateDtoAttribute : System.Attribute
{
    /// <summary>
    /// Gets the entity type to generate a DTO for.
    /// </summary>
    public System.Type EntityType { get; }

    /// <summary>
    /// Gets or sets the names of properties to exclude from DTO generation.
    /// </summary>
    public string[] Exclude { get; set; } = [];

    public string EntityFullName => EntityType.FullName ?? EntityType.Name;

    /// <summary>
    /// Initializes a new instance of the <see cref="GenerateDtoAttribute"/> class.
    /// </summary>
    /// <param name="entityType">The entity type to generate a DTO for.</param>
    public GenerateDtoAttribute(System.Type entityType) => EntityType = entityType;
}
