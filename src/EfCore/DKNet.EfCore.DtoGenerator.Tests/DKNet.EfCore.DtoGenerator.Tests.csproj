<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
        <IsPackable>false</IsPackable>
        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>
        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)Generated</CompilerGeneratedFilesOutputPath>
        <!-- Force analyzer to reload on every build to avoid caching issues -->
        <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
    </PropertyGroup>

    <!-- Custom target to copy generated DTOs to Dtos folder for easier access (flattened, no subfolders) -->
    <Target Name="CopyGeneratedDtosToProjectFolder" AfterTargets="CoreCompile" Condition="Exists('$(CompilerGeneratedFilesOutputPath)')">
        <ItemGroup>
            <GeneratedDtoFiles Include="$(CompilerGeneratedFilesOutputPath)\**\*Dto.g.cs"/>
        </ItemGroup>
        <MakeDir Directories="GeneratedDtos" Condition="'@(GeneratedDtoFiles)' != ''"/>
        <!-- Copy to project folder with .g.cs extension -->
        <Copy SourceFiles="@(GeneratedDtoFiles)" DestinationFolder="GeneratedDtos" SkipUnchangedFiles="false" OverwriteReadOnlyFiles="true"/>
        <!-- Also copy to output directory for test runtime validation, renaming to .cs (remove .g) -->
        <MakeDir Directories="$(OutDir)GeneratedDtos" Condition="'@(GeneratedDtoFiles)' != ''"/>
        <!-- Copy each file, transforming the filename to remove .g -->
        <Copy SourceFiles="%(GeneratedDtoFiles.Identity)" 
              DestinationFiles="$(OutDir)GeneratedDtos\$([System.String]::Copy('%(GeneratedDtoFiles.Filename)').Replace('.g', '')).cs" 
              SkipUnchangedFiles="false" 
              OverwriteReadOnlyFiles="true"
              Condition="'@(GeneratedDtoFiles)' != ''"/>
        <Message Text="Copied %(GeneratedDtoFiles.Filename)%(GeneratedDtoFiles.Extension) to output folder" Importance="high" Condition="'@(GeneratedDtoFiles)' != ''"/>
    </Target>

    <!-- Target to force complete cleanup of all generated files and caches -->
    <Target Name="CleanGeneratedFiles" BeforeTargets="CoreCompile">
        <ItemGroup>
            <!--            <GeneratedFilesToDelete Include="GeneratedDtos\*.g.cs"/>-->
            <GeneratedFilesToDelete Include="$(OutDir)GeneratedDtos\*.g.cs"/>
            <GeneratedFilesToDelete Include="$(CompilerGeneratedFilesOutputPath)\**\*.g.cs"/>
        </ItemGroup>
        <Delete Files="@(GeneratedFilesToDelete)" Condition="'@(GeneratedFilesToDelete)' != ''"/>
        <RemoveDir Directories="$(CompilerGeneratedFilesOutputPath)" Condition="Exists('$(CompilerGeneratedFilesOutputPath)')"/>
        <!--        <RemoveDir Directories="GeneratedDtos" Condition="Exists('GeneratedDtos')"/>-->
        <RemoveDir Directories="$(OutDir)GeneratedDtos" Condition="Exists('$(OutDir)GeneratedDtos')"/>
        <Message Text="Cleaned all generated files and caches" Importance="high"/>
    </Target>

    <ItemGroup>
        <PackageReference Include="coverlet.collector"/>
        <PackageReference Include="Microsoft.NET.Test.Sdk"/>
        <PackageReference Include="xunit"/>
        <PackageReference Include="xunit.runner.visualstudio"/>
        <PackageReference Include="Shouldly"/>
        <PackageReference Include="Mapster"/>
    </ItemGroup>

    <ItemGroup>
        <Using Include="Xunit"/>
    </ItemGroup>

    <ItemGroup>
        <!-- Reference the generator as an analyzer so it runs during compilation -->
        <ProjectReference Include="..\DKNet.EfCore.DtoEntities\DKNet.EfCore.DtoEntities.csproj"/>
        <ProjectReference Include="..\DKNet.EfCore.DtoGenerator\DKNet.EfCore.DtoGenerator.csproj"
                          OutputItemType="Analyzer"
                          ReferenceOutputAssembly="true"/>
    </ItemGroup>

    <ItemGroup>
        <Folder Include="Features\StaticData\Currencies\Queries\" />
        <Folder Include="GeneratedDtos\"/>
    </ItemGroup>

</Project>
