using System.ComponentModel;
using System.Data;
using System.Text.Json.Serialization;
using SlimBus.AppServices.Extensions.LazyMapper;
using SlimBus.Domains.Features.Profiles.Entities;

// ReSharper disable UnusedType.Global


namespace SlimBus.AppServices.Profiles.V1.Actions;

[MapsTo(typeof(CustomerProfile))]
public sealed record CreateProfileCommand : BaseCommand, Fluents.Requests.IWitResponse<ProfileResult>
{
    [Required] public string Email { get; set; } = null!;
    [Phone] public string Phone { get; set; } = null!;

    [JsonIgnore,Description("This property is not used in the mapping, it will be set by the membership provider if not provided.")]
    public string MembershipNo { get; set; } = null!;

    [StringLength(150)] [Required] public string Name { get; set; } = null!;
}

internal sealed class CreateProfileCommandValidator : AbstractValidator<CreateProfileCommand>
{
    public CreateProfileCommandValidator()
    {
        RuleFor(a => a.Email).NotEmpty().EmailAddress().Length(1, 1000);
        RuleFor(a => a.Phone).NotEmpty().Length(6, 50);
        RuleFor(a => a.Name).NotEmpty().Length(6, 100);
    }
}

internal sealed class CreateProfileCommandHandler(
    ICustomerProfileRepo repository,
    IMembershipService membershipProvider,
    IMapper mapper)
    : Fluents.Requests.IHandler<CreateProfileCommand, ProfileResult>
{
    public async Task<IResult<ProfileResult>> OnHandle(CreateProfileCommand request,
        CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(request.MembershipNo))
            request.MembershipNo = await membershipProvider.NextValueAsync();

        //Check duplicate
        if (await repository.IsEmailExistAsync(request.Email))
            return Result.Fail<ProfileResult>($"Email {request.Email} is already existed.");

        var profile = mapper.Map<CustomerProfile>(request);

        if (string.IsNullOrEmpty(profile.MembershipNo))
            throw new NoNullAllowedException(nameof(profile.MembershipNo));

        //Add
        await repository.AddAsync(profile, cancellationToken);

        //Event - Issue the Id maybe empty if the Id is generated by Database
        profile.AddEvent(new ProfileCreatedEvent(profile.Id, profile.Name));

        //NOTE this will return a lazy mapping result and only map profile to ProfileBasicView after SaveChanges is called.
        return mapper.ResultOf<ProfileResult>(profile);
    }
}